{"version":3,"sources":["redux/modules/search/filters.js","redux/modules/search/index.js","redux/modules/search/helpers.js","redux/modules/deck.js","redux/modules/root.js","components/FilterButton.js","components/FilterChip.js","components/FilterSideBar/FiltersApplied/index.js","components/FilterSideBar/FilterButtonsRow/index.js","components/FilterSideBar/CardTypeFilter/index.js","components/FilterSideBar/ColorFilter/index.js","components/FilterSideBar/EnergyFilter/index.js","components/FilterSideBar/ComboEnergyFilter/index.js","components/FilterSideBar/RarityFilter/index.js","components/FilterSideBar/filter.utils.js","components/FilterSideBar/FilterBox/index.js","components/FilterSideBar/index.js","components/EnergyColor.js","components/Card.js","components/CardsContainer.js","App.js","registerServiceWorker.js","index.js","redux/configureStore.js"],"names":["filtersSlice","createSlice","name","initialState","reducers","addFilter","state","action","payload","id","filter","find","f","push","filterFn","removeFilter","index","findIndex","splice","updateFilter","newId","filterFound","clearFilters","actions","resultSlice","AllCards","searchCards","_","filters","length","card","filterCards","CARDS_DICTIONARY","reduce","result","cardNumber","combineReducers","filtersReducer","reducer","cardsDictionary","isSearching","initState","deck","ADD_CARD","REMOVE_CARD","RESET_DECK","rootEpic","combineEpics","action$","state$","pipe","ofType","withLatestFrom","map","search","rootReducer","type","newDeck","undefined","cardData","count","FilterButton","props","label","title","highlighted","onClick","className","idString","titleTxt","FilterChip","onRemove","text","selectFilters","useSelector","dispatch","useDispatch","dispatchRemoveFilter","useCallback","content","startsWith","idx","key","FilterButtonsRow","filterGenerator","items","filterIdentifier","useState","selectedItemValues","setSelectedItemValues","selectedItemsChanged","valuesList","Object","values","onClickHandler","event","value","target","newState","buttonComponents","item","e","htmlFor","CARD_TYPES","CardAttributes","sort","createFilter","carTypesArray","includes","CardTypeFilter","COLOR_ABRV_DICT","Black","Blue","Green","Yellow","Red","CARD_COLORS","color","colorString","entries","val","replace","selectedItems","c","i","ENERGY_VALUES","Array","from","energy","resultSet","match","number","groups","energyCost","Number","parseInt","add","Set","a","b","selectedValues","isNaN","comboEnergy","CARD_RARITY_TYPES","rarity","fieldName","filterConditions","criteriaToSearchOn","JSON","stringify","isArray","slice","concat","valuesToSearchOn","conditionType","condition","criteria","negate","nValue","toString","toLocaleLowerCase","findArrayItemsInArrayOrString","removedOptions","fieldOptsSelector","keys","FilterBox","fieldOptions","onFilterAdd","obj","finalFieldOptions","option","filterText","fieldToSearch","isFilterNegation","filterValues","setFilter","onAddFilter","trim","split","txt","foundNumericCondition","RegExp","exec","foundNumericConditionFinal","onAddFilterClickHandler","origText","optionsToSelect","Fragment","defaultValue","onChange","placeholder","onKeyDown","keyCode","checked","totalCardsSelector","FilterSideBar","totalCards","ColorFilter","EnergyFilter","ComboEnergyFilter","RarityFilter","FiltersApplied","reg","filterColors","EnergyColor","this","energyIcons","extraColors","Component","Card","cardInfo","cardName","skillDescription","power","comboPower","character","specialTrait","skillKeywords","relatedCharacters","relatedSpecialTraits","relatedCardNames","era","seriesName","seriesFullName","cardImageUrl","cardBack","src","alt","join","pageNum","Error","connect","cards","hasFilters","useReducer","useEffect","prevCards","ref","useRef","current","usePrevious","cardItems","pageStart","loadMore","initialLoad","hasMore","loader","App","M","AutoInit","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","store","epicMiddleware","createEpicMiddleware","toolkitConfigureStore","middleware","run","configureStore","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a93d1528.chunk.js","sourcesContent":["'use stric'\nimport { createSlice } from '@reduxjs/toolkit'\n\nexport const filtersSlice = createSlice({\n    name: 'search/filters',\n    initialState: [],\n    reducers: {\n        addFilter(state, action) {\n            const { id, filter } = action.payload\n            if (state.find(f => f.id === id)) {\n                return// Avoid adding duplicated filters\n            }\n            state.push({ id, filterFn: filter })\n        },\n        removeFilter(state, action) {\n            const { id } = action.payload\n            const index = state.findIndex(f => f.id === id)\n            if (-1 === index) {\n                return// No filter found\n            }\n            state.splice(index, 1)\n        },\n        updateFilter(state, action) {\n            const { id, newId, filter } = action.payload\n            const filterFound = state.find(f => f.id === id)\n            if (filterFound) {\n                filterFound.id = newId || id\n                filterFound.filterFn = filter\n                return// Can't update a non existant filter\n            }\n\n            // Since no filter found, let's add a new filter instead\n            state.push({ id: newId || id, filterFn: filter })\n        },\n        clearFilters() {\n            return []\n        }\n    }\n})\n\n// Actions\nexport const { addFilter, removeFilter, updateFilter, clearFilters } = filtersSlice.actions\n\n// Reducer\nexport default filtersSlice.reducer","'use stric'\nimport { combineReducers } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit'\nimport { ofType } from 'redux-observable'\nimport { map, withLatestFrom } from 'rxjs/operators'\n\nimport { cards as AllCards } from '../../../cards.json'\nimport { filterCards } from './helpers' \nimport filtersReducer, { addFilter, updateFilter, removeFilter } from './filters' \n\n\nconst resultSlice = createSlice({\n    name: 'search/result',\n    initialState: AllCards,\n    reducers: {\n        searchCards(_, action) {\n            const { filters } = action.payload\n            // const t0 = performance.now()\n            return filterCards(AllCards, filters)\n            // const t1 = performance.now()\n            // console.log(`Filtering cards took \"${t1 - t0}\" miliseconds.`, state.length)\n        }\n    }\n})\n\nconst CARDS_DICTIONARY = AllCards.reduce(\n    (result, card) => {\n        result[card.cardNumber] = card\n        return result\n    },\n    {}\n)\n\n// Actions\nexport const { searchCards } = resultSlice.actions\n\n// Reducer\nexport default combineReducers({\n    filters: filtersReducer,\n    result: resultSlice.reducer,\n    cardsDictionary: () => CARDS_DICTIONARY,\n    isSearching: () => false\n})\n\n// Side effects\nexport const updateSearchEpic = (action$, state$)  => action$.pipe(\n    ofType(addFilter, updateFilter, removeFilter),\n    withLatestFrom(state$),\n    map(([, state]) => {\n        const { search: { filters } } = state\n        return searchCards({ filters })\n    })\n)\n","'use stric'\n\nexport const filterCards = (AllCards, filters = []) => {\n    if (filters.length === 0) {\n        return AllCards\n    }\n\n    return AllCards.filter(\n        card => {\n            for (let index = 0; index < filters.length; index++) {\n                if (!filters[index].filterFn(card)) {\n                    return false\n                }\n            }\n            return true\n        }\n    )\n}\n","'use stric';\n\n// import 'rxjs/add/operator/map';\n// import 'rxjs/add/operator/do';\n// import 'rxjs/add/operator/ignoreElements';\n\n// Initial State\nconst initState = {\n    deck: {}\n}\n\n\n// Actions\nconst\n    ADD_CARD = 'dbs-scraper/deck/ADD_CARD',\n    REMOVE_CARD = 'dbs-scraper/deck/REMOVE_CARD',\n    RESET_DECK = 'dbs-scraper/deck/RESET_DECK'\n\n\n// Reducer\nexport default function reducer(state = initState, action = {}) {\n    switch(action.type) {\n\n        case ADD_CARD: {\n            const newDeck = { ...state.deck }\n            if (newDeck[ action.card.cardNumber ] === undefined) {\n                newDeck[ action.card.cardNumber ] = { \n                    cardData: action.card,\n                    count: 0\n                }\n            }\n\n            newDeck[ action.card.cardNumber ].count++\n            return { ...state, ...{ deck: newDeck } }\n        }\n\n        case REMOVE_CARD: {\n            if (state.deck[ action.card.cardNumber ] === undefined) {\n                return state// Nothing to do, card was never in the deck\n            }\n\n            const newDeck = { ...state.deck }\n            newDeck[ action.card.cardNumber ].count--\n            if (newDeck[ action.card.cardNumber ].count < 1) {\n                delete newDeck[ action.card.cardNumber ]\n            }\n            return { ...state, ...{ deck: newDeck } }\n        }\n\n        case RESET_DECK:\n            return { ...state, ...{ deck: {} } }\n        \n\n        default:  return state\n    }\n}\n\n\n// Action Creators\nexport const addCard = card => ({\n    type: ADD_CARD,\n    card\n})\n\nexport const removeCard = card => ({\n    type: REMOVE_CARD,\n    card\n})\n\nexport const resetDeck = () => ({\n    type: RESET_DECK\n})\n\n","'use stric';\n\nimport { combineEpics } from 'redux-observable';\nimport { combineReducers } from 'redux';\nimport search, { updateSearchEpic } from './search'\nimport deck from './deck'\n\nexport const rootEpic = combineEpics(\n\n  // Search\n  updateSearchEpic//, searchCardsEpic\n);\n\nexport const rootReducer = combineReducers({\n    search, deck\n});","import React from 'react'\nimport './FilterButton.css'\n\n\nconst FilterButton = (props) => {\n    const { \n        label = '', title,\n        highlighted = false,\n        id, onClick\n    } = props\n\n    const customClass = highlighted ? ' filter-on' : ''\n    const className = 'btn btn-secondary' + customClass\n\n    const idString = id || label\n    const titleTxt = title || label\n\n    return (\n        <label id={idString} title={titleTxt} className={className} onClick={onClick}>\n            {label}\n        </label>\n    )\n}\n\nexport default FilterButton\n","import React from 'react';\n\nconst FilterChip = (props) => {\n    const { onRemove, text } = props;\n    return (\n        <div className=\"chip\">\n            <span>{text}</span>\n            <i className=\"material-icons filter-chip\" onClick={onRemove}>close</i>\n        </div>\n    )\n}\n\nexport default FilterChip","import React, { useCallback } from 'react'\nimport { useSelector, useDispatch  } from 'react-redux'\nimport { removeFilter } from '../../../redux/modules/search/filters'\nimport FilterChip from '../../FilterChip'\n\nconst selectFilters = ({ search }) => search.filters\n\nexport const IDENTIFIER_PREFIX = '_$hide:'\nexport default () => {\n    const filters = useSelector(selectFilters)\n    const dispatch = useDispatch()\n    \n    const dispatchRemoveFilter = useCallback(\n        id => dispatch( removeFilter({id}) ),\n        [dispatch]\n    )\n\n    const filtersToShow = filters.filter(\n        ({ id }) => !id.startsWith(IDENTIFIER_PREFIX)\n    )\n    \n    const content = filtersToShow.map(\n        ({ id }, idx) => <FilterChip key={id + idx} text={id} onRemove={() => dispatchRemoveFilter(id)} />\n    )\n\n    return (\n        <div className=\"col s12\">\n            {content}\n        </div>\n    )\n}\n","import React, { useState, useCallback } from 'react'\nimport FilterButton from '../../FilterButton'\nimport { useDispatch } from 'react-redux'\nimport { updateFilter, removeFilter } from '../../../redux/modules/search/filters'\nimport { IDENTIFIER_PREFIX } from '../FiltersApplied'\n\n\nconst FilterButtonsRow = (props) => {\n    const {\n        title = 'filterRow',\n        filterGenerator,\n        items\n    } = props\n\n    const filterIdentifier = IDENTIFIER_PREFIX + title\n\n    const [selectedItemValues, setSelectedItemValues] = useState({})\n    const dispatch = useDispatch()\n\n    const selectedItemsChanged = useCallback((items) => {\n        const valuesList = Object.values(items)\n        if (valuesList.length > 0) {\n            dispatch( updateFilter({\n                id: filterIdentifier, filter: filterGenerator(valuesList)\n            }) )\n            return\n        }\n\n        dispatch( removeFilter({ id: filterIdentifier }) )\n    }, [dispatch, filterIdentifier, filterGenerator])\n\n    const onClickHandler = useCallback(\n        (event, value) => {\n            const { target: { id } } = event;\n            const newState = { ...selectedItemValues }\n            const isSelected = undefined !== selectedItemValues[id]\n            \n            if (isSelected) {\n                delete newState[id]\n            }\n            else {// Not selected\n                newState[id] = value\n            }\n\n            setSelectedItemValues(newState)\n            selectedItemsChanged(newState)\n        },\n        [selectedItemValues, setSelectedItemValues, selectedItemsChanged]\n    )\n\n    const buttonComponents = items.map(\n        (item, index) => {\n            const id = `filter-button-${title}-${item.label}-${index}`\n            return (\n                <FilterButton\n                    id={id}\n                    key={item.value + item.label}\n                    label={item.label}\n                    title={item.title || item.value}\n                    highlighted={selectedItemValues[id] !== undefined}\n                    onClick={e => onClickHandler(e, item.value)}\n                />\n            )\n        }\n    )\n\n    return (\n        <div className=\"input-field col s12\">\n            <div htmlFor=\"type\">{title}</div>\n            <div className=\"mx-auto btn-group-toggle btn-group\">\n                {buttonComponents}\n            </div>\n        </div>\n    )\n}\n\nexport default FilterButtonsRow","import React from 'react'\nimport FilterButtonsRow from '../FilterButtonsRow'\nimport { attributes as CardAttributes} from '../../../cards.json'\n\nconst CARD_TYPES = CardAttributes.type.sort().map(\n    item => ({ label: item, value: item})\n)\n\nconst createFilter = (carTypesArray = []) => {\n    return card => carTypesArray.includes(card.type)\n}\n\nconst CardTypeFilter = () => {\n    return (\n        <FilterButtonsRow\n            title={'Card Type'}\n            filterGenerator={createFilter}\n            items={CARD_TYPES}\n        />\n    )\n}\n\nexport default CardTypeFilter","import React from 'react'\nimport FilterButtonsRow from '../FilterButtonsRow'\nimport { attributes as CardAttributes} from '../../../cards.json'\n\nconst COLOR_ABRV_DICT = {\n    Black: 'B',\n    Blue: 'U',\n    Green: 'G',\n    Yellow: 'Y',\n    Red: 'R'\n}\n\nconst CARD_COLORS = CardAttributes.color.map(\n    colorString => ({\n        value: colorString,\n        label: Object.entries(COLOR_ABRV_DICT).reduce(\n            (result, [key, val]) => result.replace(key, val),\n            colorString\n        )\n    })\n)\n\nconst createFilter = (selectedItems = []) => c => selectedItems.find(i => c.color === i)\n\nconst CardTypeFilter = () => {\n    return (\n        <FilterButtonsRow\n            title={'Color'}\n            filterGenerator={createFilter}\n            items={CARD_COLORS}\n        />\n    )\n}\n\nexport default CardTypeFilter\n","import React from 'react'\nimport FilterButtonsRow from '../FilterButtonsRow'\nimport { attributes as CardAttributes} from '../../../cards.json'\n\n\nconst ENERGY_VALUES = Array.from(\n    CardAttributes.energy.reduce(\n        (resultSet, item) => {\n            const match = item.match(/^(?<number>\\d*)/)\n            if (!match) {\n                return resultSet\n            }\n            \n            const { groups: { number } } = match\n            const energyCost = Number.parseInt(number, 10)\n            resultSet.add(energyCost)\n\n            return resultSet\n        },\n        new Set()\n    ).values()\n).sort(\n    (a, b) => a -b\n).map(\n    i => ({ value: i, label: i })\n)\n\nconst createFilter = (selectedValues = []) => {\n    return card => {\n        if (typeof card.energy !== 'string') {\n            return false\n        }\n        \n        const match = card.energy.match(/^(?<number>\\d*)/)\n        if (!match) {\n            return false\n        }\n        \n        const { groups: { number } } = match\n        const energyCost = Number.parseInt(number, 10)\n        if (Number.isNaN(energyCost)) {\n            return false\n        }\n        \n        return undefined !== selectedValues.find(\n            item => {\n                if (item === 6) {\n                    return energyCost >= item \n                }\n\n                return item === energyCost\n            }\n        )\n    }\n}\n\nconst CardTypeFilter = () => {\n    return (\n        <FilterButtonsRow\n            title={'Energy Cost'}\n            filterGenerator={createFilter}\n            items={ENERGY_VALUES}\n        />\n    )\n}\n\nexport default CardTypeFilter","import React from 'react'\nimport FilterButtonsRow from '../FilterButtonsRow'\nimport { attributes as CardAttributes} from '../../../cards.json'\n\nconst CARD_TYPES = CardAttributes.comboEnergy.sort().map(\n    item => ({\n        label: item,\n        value: Number.parseInt(item, 10)\n    })\n)\n\nconst createFilter = (selectedValues = []) => {\n    return card => {\n        if (typeof card.comboEnergy !== 'string') {\n            return false\n        }\n        \n        const { groups: { number } } = card.comboEnergy.match(/^(?<number>\\d*)/)\n        if (number.length === 0) {\n            return false\n        }\n        \n        const energyCost = Number.parseInt(number, 10)\n        if (Number.isNaN(energyCost)) {\n            return false\n        }\n        \n        return undefined !== selectedValues.find(\n            item => {\n                return item === energyCost\n            }\n        )\n    }\n}\n\nconst CardTypeFilter = () => {\n    return (\n        <FilterButtonsRow\n            title={'Combo Energy'}\n            filterGenerator={createFilter}\n            items={CARD_TYPES}\n        />\n    )\n}\n\nexport default CardTypeFilter","import React from 'react'\nimport FilterButtonsRow from '../FilterButtonsRow'\nimport { attributes as CardAttributes} from '../../../cards.json'\n\nconst CARD_RARITY_TYPES = CardAttributes.rarity.map(\n    item => {\n        const match = item.match(/.*\\[(?<rarity>.+)\\]/)\n        if (!match) {\n            return { label: item, value: item}\n        }\n        \n        const { groups: { rarity } } = match\n\n        return { label: rarity, value: item }\n    } \n)\n\nconst createFilter = (carTypesArray = []) => {\n    return card => carTypesArray.includes(card.rarity)\n}\n\nconst CardTypeFilter = () => {\n    return (\n        <FilterButtonsRow\n            title={'Rarity'}\n            filterGenerator={createFilter}\n            items={CARD_RARITY_TYPES}\n        />\n    )\n}\n\nexport default CardTypeFilter\n","const NUMERIC_REGEXP = '^(?<condition>[<>]=?)\\\\s*?(?<criteria>\\\\d+)'\nconst NUMERIC_REGEXP_WITH_OPERATORS = '^(?<criteria>\\\\d+)\\\\s*?(?<condition>[+-])'\n\nconst findArrayItemsInArrayOrString = (filterConditions, valuesToSearchOn) => {\n    return !!filterConditions.find(values => {\n        const { conditionType, condition, criteria, negate } = values\n        return valuesToSearchOn.find(\n            value => {\n                if (conditionType === 'numeric') {\n                    const nValue = Number(value.replace(/\\D+/g, \"\"))\n                    switch (condition) {\n                        case '<': return nValue < Number(criteria)\n                        case '>': return nValue > Number(criteria)\n                        case '<=': \n                        case '-': return nValue <= Number(criteria)\n                        case '>=':\n                        case '+': return nValue >= Number(criteria)\n                        default: break\n                    }\n                }\n\n                const val = value.toString().toLocaleLowerCase().includes(criteria.toString().toLocaleLowerCase())\n                return negate ? !val : val\n            }\n        )\n    })\n}\n\nexport const getFieldsToSearch = (card) => {\n    const struct = Object.keys(card).reduce(\n        (result, fieldName) => {\n            let type = typeof card[fieldName]\n            if (Array.isArray( card[fieldName] )) {\n                type = 'array'\n            }\n\n            result.push({ fieldName, type, label: fieldName })\n            return result\n        },\n        []\n    ).sort(\n        (a, b) => {\n            if (a.label > b.label) return 1\n            else if (a.label < b.label) return -1\n            return 0\n        }\n    )\n\n    return struct\n}\n\nexport const isInFilters = (ar, field, current) => (\n    ar.find(({ id })=> id.toLocaleLowerCase().startsWith(field.toLocaleLowerCase()) && id.toLocaleLowerCase().includes(current.toLocaleLowerCase()))\n)\n\n\nexport const parseFilterText = text => {\n    const criteriaArray = text.trim().toLocaleLowerCase().split(/\\s*\\|\\|\\s*/gm)\n    return criteriaArray.map(\n        txt => {\n            const foundNumericCondition = (new RegExp(NUMERIC_REGEXP, 'g')).exec(txt)\n            const foundNumericConditionFinal = foundNumericCondition ? foundNumericCondition : (new RegExp(NUMERIC_REGEXP_WITH_OPERATORS, 'g')).exec(txt) \n            if (foundNumericConditionFinal) {\n                const { groups: { condition, criteria } } = foundNumericConditionFinal\n                return { conditionType: 'numeric', criteria: criteria.includes('not') ? criteria.split(/\\s/gm)[1] : criteria, condition, negate: criteria.includes('not') }\n            }\n            return { conditionType: 'contains', criteria: txt.includes('not') ? txt.split(/\\s/gm)[1].trim() : txt, negate: txt.includes('not') }\n        }\n    )\n}\n\nexport const createFilter = (fieldName, filterConditions, type) => {\n    let filter = card => {\n        let criteriaToSearchOn\n        if (type === 'object') {// no implementation yet, so we search in the whole object\n            criteriaToSearchOn = [JSON.stringify( card[fieldName] )]\n        }\n        else {\n            let val = card[fieldName]\n            if (val === null || val === undefined) {\n                return false\n            }\n            criteriaToSearchOn = Array.isArray(val) ? val.slice() : [val]\n            // We look for the field in the back of the card and add it to our search\n            if (card['cardBack'] && card['cardBack'][fieldName]) {\n                val = card['cardBack'][fieldName]\n                if (Array.isArray(val)) {\n                    criteriaToSearchOn = criteriaToSearchOn.concat(val)\n                }\n                else {\n                    criteriaToSearchOn.push( val )\n                }\n            }\n        }\n\n        return findArrayItemsInArrayOrString(filterConditions, criteriaToSearchOn)\n    }\n    return filter\n}\n","import React, { useState, useCallback } from 'react'\nimport { useSelector, useDispatch  } from 'react-redux'\nimport { addFilter } from '../../../redux/modules/search/filters'\n\nimport { \n    createFilter,\n    getFieldsToSearch,\n    parseFilterText\n} from '../filter.utils'\n\nconst removedOptions = [\n    'availableDate', 'cardImageUrl', 'cardBack', 'era', 'type', 'color', 'energy', 'comboEnergy',\n    /*'rarity', 'character', 'skillKeywords', 'cardNumber', */\n]\n\nconst fieldOptsSelector = ({ search }) => getFieldsToSearch(\n    search.cardsDictionary[ Object.keys(search.cardsDictionary)[4] ]\n)\n\nconst FilterBox = () => {\n    const fieldOptions = useSelector(fieldOptsSelector)\n    const dispatch = useDispatch()\n    const onFilterAdd = useCallback(\n        obj => dispatch( addFilter(obj) )\n    , [dispatch])\n\n\n    const finalFieldOptions = fieldOptions.filter(\n        option => !removedOptions.includes(option)\n    ).sort()\n\n    const [ filterValues, setFilter ] = useState({ filterText: '', fieldToSearch: finalFieldOptions[0], isFilterNegation: false })\n    const { filterText, isFilterNegation } = filterValues\n\n    const onAddFilter = (type, fieldName, filterText, isFilterNegation) => {\n        if (typeof filterText !== 'string') {\n            return// Empty string\n        }\n\n        if(isFilterNegation)\n            filterText = 'not ' + filterText\n        const filterConditions = parseFilterText(filterText)\n        const filter = createFilter(fieldName, filterConditions, type)\n        onFilterAdd({ id: `${fieldName}: ${filterText}`, filter })\n    }\n\n    const onAddFilterClickHandler = _ => {\n        const { filterText: origText, fieldToSearch: { type, fieldName }, isFilterNegation } = filterValues\n        let filterText = origText.trim()\n        onAddFilter(type, fieldName, filterText, isFilterNegation)\n    }\n\n    const onFieldSelectionChangeHandler = event => {\n        setFilter({ ...filterValues, fieldToSearch: finalFieldOptions[event.target.value] })\n    }\n\n    const onFilterTextChangeHandler = (event) => {\n        setFilter({ ...filterValues, filterText: event.target.value })\n    }\n\n    const onNegationFilterChangeHandler = (event) => {\n        setFilter({ ...filterValues, isFilterNegation: event.target.checked })\n    }\n\n    const onInputTextKeyDownHandler = (event) => {\n        const isEnter = event.keyCode === 13\n        if (isEnter) {\n            onAddFilterClickHandler()\n        }\n    }\n\n    const optionsToSelect = finalFieldOptions.map(\n        (option, index) => (\n            <option key={option.fieldName} value={index}>\n                {option.label}\n            </option>\n        )\n    )\n\n    return (\n        <React.Fragment>\n            <div className=\"input-field col s12\">\n                <select id=\"filter-box-type-input\" defaultValue={0} onChange={onFieldSelectionChangeHandler}> {optionsToSelect} </select>\n                <label htmlFor=\"filter-box-type-input\">Field</label>\n            </div>\n\n            <div className=\"input-field col s12\">\n                <input\n                    id=\"filter-box-criteria-input\"\n                    type=\"text\" placeholder=\"For an OR operation use ||\"\n                    value={filterText}\n                    onChange={onFilterTextChangeHandler}\n                    onKeyDown={onInputTextKeyDownHandler} />\n                <label htmlFor=\"filter-box-criteria-input\">Search</label>\n            </div>\n\n            <div className=\"input-field col s3\">\n                <label>\n                    <input type=\"checkbox\" checked={isFilterNegation} onChange={onNegationFilterChangeHandler}/>\n                    <span>\n                        { isFilterNegation ? 'Not' : null }\n                    </span>\n                </label>\n            </div>\n\n            <div className=\"input-field col s3\">\n                <span><button className=\"waves-effect waves-light btn\" onClick={onAddFilterClickHandler}>Add</button></span>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default FilterBox\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport './index.css'\n\nimport CardTypeFilter from './CardTypeFilter'\nimport ColorFilter from './ColorFilter'\nimport EnergyFilter from './EnergyFilter'\nimport ComboEnergyFilter from './ComboEnergyFilter'\nimport FiltersApplied from './FiltersApplied'\nimport RarityFilter from './RarityFilter'\nimport FilterBox from './FilterBox'\n\nconst totalCardsSelector = ({ search }) => search.result.length\n\nconst FilterSideBar = () => {\n    const totalCards = useSelector(totalCardsSelector)\n\n    return (\n        <div className=\"col s12 filter-box white-text\">\n            <div className=\"row\">\n                <CardTypeFilter />\n                <ColorFilter />\n                <EnergyFilter />\n                <ComboEnergyFilter />\n                <RarityFilter />\n                \n                {/* <div className=\"input-field col s12\">\n                    <select id=\"character\" className=\"mx-auto btn-group-toggle btn-group\">\n                        <option value=\"\">Character</option>\n                        <option value=\"Common[C]\">Common[C]</option>\n                        <option value=\"Rare[R]\">Rare[R]</option>\n                        <option value=\"Starter Rare[ST]\">Starter Rare[ST]</option>\n                        <option value=\"Super Rare[SR]\">Super Rare[SR]</option>\n                        <option value=\"Uncommon[UC]\">Uncommon[UC]</option>\n                        <option value=\"Other\">Other</option>\n                    </select>\n                </div> */}\n                {/* <div className=\"input-field col s12\">\n                    <select id=\"skillKeywords\" className=\"mx-auto btn-group-toggle btn-group\">\n                        <option value=\"\">Skill Keywords</option>\n                        <option value=\"Common[C]\">Common[C]</option>\n                        <option value=\"Rare[R]\">Rare[R]</option>\n                        <option value=\"Starter Rare[ST]\">Starter Rare[ST]</option>\n                        <option value=\"Super Rare[SR]\">Super Rare[SR]</option>\n                        <option value=\"Uncommon[UC]\">Uncommon[UC]</option>\n                        <option value=\"Other\">Other</option>\n                    </select>\n                </div> */}\n            </div>\n\n            <FilterBox />\n\n            <div className=\"row\">\n                <FiltersApplied />\n            </div>\n            <div className=\"row\">\n                <span className=\"white-text\">Total of cards: {totalCards}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default FilterSideBar","import React, { Component } from 'react'\nimport './EnergyColor.css'\n\nconst\n    reg = /[\\dbugyr]+/g,\n    filterColors = e => e.match(reg),\n    iconPrinter = e => filterColors(e).map((i, index) => {\n        const key = i + index\n        if (!isNaN(Number(i))) {\n            let extraColors = filterColors(e).length - 1\n            if (i-extraColors > 0)\n                return <span key={key} className=\"energy-color white\">{i-extraColors}</span> \n            else\n                return null\n        }\n\n        switch (i) {\n          case 'b':\n              return <span key={key} className=\"energy-color light-blue accent-4\"></span>\n          case 'g':\n              return <span key={key} className=\"energy-color green accent-4\"></span>\n          case 'r':\n              return <span key={key} className=\"energy-color red accent-4\"></span>\n          case 'y':\n              return <span key={key} className=\"energy-color yellow accent-2\"></span>\n          default:\n              return <span key={key} className=\"energy-color white\">{i}</span>\n        }\n    })\n\nclass EnergyColor extends Component {\n\n    render() {\n        const { energy } = this.props\n        if (!energy) {\n            return <span>{energy}</span>\n        }\n        \n        const energyIcons = iconPrinter(energy)\n        return (\n            <span>\n                {energyIcons}\n            </span>\n        )\n    }\n}\n\nexport default EnergyColor\n","import React, { Component } from 'react';\nimport './Card.css'\nimport EnergyColor from './EnergyColor';\n\nclass Card extends Component {\n\n    render() {\n        const { cardInfo } = this.props;\n        const {\n            type, cardName, energy, color, skillDescription, power, comboPower, comboEnergy,\n            character, specialTrait, rarity, cardNumber, skillKeywords, relatedCharacters,\n            relatedSpecialTraits, relatedCardNames, era, seriesName, seriesFullName, \n            cardImageUrl, cardBack\n        } = cardInfo\n\n        return (\n            <div className=\"col s12 card teal lighten-3\">\n                <div className=\"row\">\n                    <div className=\"col m4 l3 card-image hide-on-small-only\">\n                        <img src={cardImageUrl} alt={cardName} />\n                    </div>\n\n                    <div className=\"col s12 m8 l9 card-content\">\n                        <div className=\"col s12\">\n                            <span className=\"card-title\">{cardName} <sup>({cardNumber} {rarity})</sup></span>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col s3\">\n                                <span className=\"fieldname white-text\">Type:</span><span className=\"field-data\">{type}</span>\n                            </div>\n\n                            <div className=\"col s3\">\n                                <span className=\"fieldname white-text\">Color:</span><span className=\"field-data\">{color}</span>\n                            </div>\n\n                            { ! (type === 'LEADER') ? (\n                                <div className=\"col s6\">\n                                    <span className=\"fieldname white-text\">Energy:</span>\n                                    <span className=\"field-data\"><EnergyColor energy={energy} /></span>\n                                </div>\n                                ) : null\n                            }\n                        </div>\n                        { ! (type === 'EXTRA') ? (\n                            <React.Fragment>\n                            <div className=\"row\">\n                                <div className=\"col s3\">\n                                    <span className=\"fieldname white-text\">Power:</span><span className=\"field-data\">{power}</span>\n                                </div>\n                                { type === 'BATTLE' ? (\n                                    <div className=\"col s4 l3\">\n                                        <span className=\"fieldname white-text\">Combo:</span>\n                                        <span className=\"field-data\">\n                                            <EnergyColor energy={comboEnergy}/>\n                                            <span className=\"field-data\">+ {comboPower}</span>\n                                        </span>\n                                    </div>\n                                    ) : null\n                                }\n\n                                <div className=\"col s5 l6\">\n                                    <span className=\"fieldname white-text\">Era:</span><span className=\"field-data\">{era}</span>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col s6\">\n                                    <span className=\"fieldname white-text\">Character:</span><span className=\"field-data\">{character}</span>\n                                </div>\n\n                                <div className=\"col s6\">\n                                    <span className=\"fieldname white-text\">Special Trait:</span><span className=\"field-data\">{specialTrait}</span>\n                                </div>\n                            </div>\n\n                            </React.Fragment>\n                            ) : null\n                        }\n                        { relatedCharacters.length > 0 ? (\n                            <div className=\"col s12 m6\">\n                                <span className=\"fieldname white-text\">Related Characters:</span><span className=\"field-data\">{relatedCharacters.join(', ')}</span>\n                            </div>\n                            ) : null\n                        }\n                        { relatedSpecialTraits.length > 0 ? (\n                            <div className=\"col s12 m6\">\n                                <span className=\"fieldname white-text\">Related Special Traits:</span><span className=\"field-data\">{relatedSpecialTraits.join(', ')}</span>\n                            </div>\n                            ) : null\n                        }\n                        { relatedCardNames.length > 0 ? (\n                            <div className=\"col s12 m6\">\n                                <span className=\"fieldname white-text\">Related Card Names:</span><span className=\"field-data\">{relatedCardNames.join(', ')}</span>\n                            </div>\n                            ) : null\n                        }\n                        <div className=\"col s12\">\n                            <span className=\"fieldname white-text\">Series Full Name:</span><span className=\"field-data\">{seriesName} - {seriesFullName}</span>\n                        </div>\n                        <div className=\"col s12\">\n                            <span className=\"fieldname white-text\">Skill Keywords:</span><span className=\"field-data\">{skillKeywords.join(', ')}</span>\n                        </div>\n                        <div className=\"col s12\">\n                            <span className=\"fieldname white-text\">Skill:</span><span className=\"field-data\"><pre>{skillDescription}</pre></span>\n                        </div>\n                    </div>\n                </div>\n                { cardBack ? (\n                    <div className=\"row\">\n                        <div className=\"col m4 l3 card-image hide-on-small-only\">\n                            <img src={cardBack.cardImageUrl} alt={cardName} />\n                        </div>\n                        <div className=\"col s12 m8 l9 card-content\">\n                            <div className=\"row\">\n                                <div className=\"col s12\">\n                                    <span className=\"card-title\">{cardBack.cardName}</span>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                <div className=\"col s3\">\n                                    <span className=\"fieldname white-text\">Type:</span><span className=\"field-data\">{type}</span>\n                                </div>\n\n                                <div className=\"col s3\">\n                                    <span className=\"fieldname white-text\">Color:</span><span className=\"field-data\">{cardBack.color}</span>\n                                </div>\n\n                                <div className=\"col s3\">\n                                    <span className=\"fieldname white-text\">Power:</span><span className=\"field-data\">{cardBack.power}</span>\n                                </div>\n\n                                <div className=\"col s6\">\n                                    <span className=\"fieldname white-text\">Character:</span><span className=\"field-data\">{cardBack.character}</span>\n                                </div>\n\n                                <div className=\"col s6\">\n                                    <span className=\"fieldname white-text\">Special Trait:</span><span className=\"field-data\">{cardBack.specialTrait}</span>\n                                </div>\n\n                                { cardBack.relatedCharacters.length > 0 ? (\n                                    <div className=\"col s12 m6\">\n                                        <span className=\"fieldname white-text\">Related Characters:</span><span className=\"field-data\">{cardBack.relatedCharacters.join(', ')}</span>\n                                    </div>\n                                    ) : null\n                                }\n                                { cardBack.relatedSpecialTraits.length > 0 ? (\n                                    <div className=\"col s12 m6\">\n                                        <span className=\"fieldname white-text\">Related Special Traits:</span><span className=\"field-data\">{cardBack.relatedSpecialTraits.join(', ')}</span>\n                                    </div>\n                                    ) : null\n                                }\n                                { cardBack.relatedCardNames.length > 0 ? (\n                                    <div className=\"col s12 m6\">\n                                        <span className=\"fieldname white-text\">Related Card Names:</span><span className=\"field-data\">{cardBack.relatedCardNames.join(', ')}</span>\n                                    </div>\n                                    ) : null\n                                }\n                                <div className=\"col s12\">\n                                    <span className=\"fieldname white-text\">Skill Keywords:</span><span className=\"field-data\">{cardBack.skillKeywords.join(', ')}</span>\n                                </div>\n                                <div className=\"col s12\">\n                                    <span className=\"fieldname white-text\">Skill:</span><span className=\"field-data\"><pre>{cardBack.skillDescription}</pre></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    ) : null\n                }\n\n            </div>\n        )\n    }\n}\n\nexport default Card;\n","import React, {\n    useEffect,\n    useReducer,\n    useRef\n} from 'react';\nimport { connect } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Card from './Card';\n\nconst MAX_PAGE_ITEMS = 20\n\nfunction usePrevious(value) {\n    const ref = useRef(value);\n    useEffect(() => {\n        ref.current = value;\n    });\n\n    return ref.current;\n}\n\nconst initialState = { pageNum: 1 }\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case 'reset':\n            return { pageNum: 0 };\n        case 'newPageLoad':\n            return { pageNum: state.pageNum + 1};\n        default:\n            throw new Error();\n    }\n}\n\nfunction CardsContainer(props) {\n    const { cards, hasFilters } = props\n    const [{ pageNum }, dispatch] = useReducer(reducer, initialState)\n\n    useEffect(() => {\n        dispatch({ type: 'reset' })\n    }, [cards])\n\n    const prevCards = usePrevious(cards)\n\n    if ( !hasFilters ) {\n        return 'Add some filters to search cards'\n    }\n\n    if (cards.length === 0) {\n        return 'Found 0 cards with that criteria'\n    }\n\n    if (prevCards !== cards) {\n        /*\n         * This is a hack due to the very poor implementation of the\n         * infinite scroll plugin. Maybe i should make my own.\n         * \n         * Let's unmount the InfiniteScroll and wait for the next \n         * re-render in order to get the pagination reset.\n         */\n        return 'if you see this for more than a second, report it. It\\'s a bug'\n    }\n\n    const pageLoadActionCretor = () => dispatch({ type: 'newPageLoad' })\n    \n    const cardItems = cards.slice(0, pageNum * MAX_PAGE_ITEMS).map(\n        card => <Card key={card.cardNumber} cardInfo={card}/>\n    )\n\n    return (\n        <InfiniteScroll\n            pageStart={pageNum}\n            loadMore={pageLoadActionCretor}\n            initialLoad={true}\n            hasMore={cardItems.length < cards.length}\n            loader={<div className=\"loader\" key={0}>Rendering more cards...</div>}\n        >\n            {cardItems}\n        </InfiniteScroll>\n    )\n}\n\nconst\n    mapStateToProps = ({ search }) => ({\n        cards: search.result,\n        hasFilters: search.filters.length > 0\n    }),\n    mapDispatchToProps = null\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardsContainer);\n","import React, { Component } from 'react'\nimport 'materialize-css/dist/css/materialize.min.css'\nimport M from \"materialize-css\"\nimport './App.css'\nimport FilterSideBar from './components/FilterSideBar'\nimport CardsContainer from './components/CardsContainer'\n\nclass App extends Component {\n\n    componentDidMount() {\n        M.AutoInit()\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"row\">\n                    <div className=\"App-header grey darken-3 col s12 m4 l3\">\n                        <FilterSideBar />\n                    </div>\n                    <div className=\"col s12 m8 l9\">\n                        <CardsContainer />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './redux/configureStore';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst store = configureStore();\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\nregisterServiceWorker();\n","import { configureStore as toolkitConfigureStore } from '@reduxjs/toolkit'\nimport { createEpicMiddleware } from 'redux-observable';\nimport { rootEpic, rootReducer } from './modules/root';\n\n\nexport default function configureStore() {\n    const epicMiddleware = createEpicMiddleware();\n    const store = toolkitConfigureStore({\n        reducer: rootReducer,\n        middleware: [ epicMiddleware ]\n    });\n    epicMiddleware.run(rootEpic);\n\n    return store;\n}"],"sourceRoot":""}